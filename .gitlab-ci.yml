default:
  image: registry.gitlab.com/opusdv/liblogur/cmake
  tags: 
    - aws
  
variables:
  CMAKE_VERSION: "3.22"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

stages:
  - check
  - build
  - test
  - upload
  - release

get-sonar-binaries:
  stage: .pre
  cache:
    policy: push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/
  script:
    # Download sonar-scanner
    - curl -sSLo ./sonar-scanner.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip'
    - unzip -o sonar-scanner.zip
    - mv sonar-scanner-4.7.0.2747-linux sonar-scanner
    # Download build-wrapper
    - curl -sSLo ./build-wrapper-linux-x86.zip "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip"
    - unzip -oj build-wrapper-linux-x86.zip -d ./build-wrapper
  only:
    - merge_requests
    - main

dev_build_job:
  stage: build
  cache:
    policy: pull-push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/
      - bw-output/
  script:
    - echo $CI_JOB_NAME
    - ls -l
    - build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output cmake/cmake --build .  --target logur
  only:                                                                                                       
    - merge_requests                                                                                          
    - main
sonarcloud-check:
  stage: .post
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/
      - bw-output/
  script:
    - sonar-scanner/bin/sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.build-wrapper-output=bw-output
  only:
    - merge_requests
    - main                                       
            


dev_linter:
  stage: check
  script:
    - echo "Start linter cmake-format LLVM Style"
    - clang-format -i $(find . -name "*.c")
    - clang-format -i $(find . -name "*.h")

dev_unit_testing_job:
  stage: test
  script:
    - ctest --rerun-failed --output-on-failure
  only:
    - dev-v[0-9].[0-9].[0-9]

dev_upload_rpm_job:
  image: curlimages/curl:latest
  stage: upload
  needs: 
    - job: dev_build_job
      artifacts: true
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/liblogur-$CI_COMMIT_BRANCH-$CI_PIPELINE_ID.rpm "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/liblogur/$CI_COMMIT_BRANCH/liblogur-$COMMIT_BRANCH-$CI_PIPELINE_ID.rpm"'
  only:                                                                                                       
    - dev-v[0-9].[0-9].[0-9]

release_job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs:
    - job: dev_build_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
  script:
    - echo "CREATE RELEASE"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: 'Created using the release-cli $EXTRA_DESCRIPTION'
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
    milestones:
      - 'm1'
    assets:
      links:
        - name: "liblogur-$CI_COMMIT_BRANCH.rpm"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/liblogur/$CI_COMMIT_BRANCH/liblogur-$CI_COMMIT_BRANCH-$CI_PIPELINE_ID.rpm"
